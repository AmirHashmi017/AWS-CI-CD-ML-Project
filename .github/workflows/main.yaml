name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  continuous-deployment:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Test SSH Connection
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 30s
          script: |
            echo "SSH connection successful!"
            whoami
            pwd

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 600s
          command_timeout: 15m
          script: |
            set -e
            
            echo "=== Starting Deployment ==="
            
            # Define variables at the start
            ECR_REGISTRY="${{ secrets.AWS_ECR_LOGIN_URI }}"
            ECR_REPOSITORY="${{ secrets.ECR_REPOSITORY_NAME }}"
            AWS_REGION="${{ secrets.AWS_REGION }}"
            IMAGE_TAG="latest"
            FULL_IMAGE="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
            
            echo "Image to deploy: ${FULL_IMAGE}"
            
            # Validate image name
            if [[ "${FULL_IMAGE}" == *"/"* ]] && [[ "${FULL_IMAGE}" != "/:latest" ]]; then
                echo "✅ Image name looks valid"
            else
                echo "❌ Invalid image name: ${FULL_IMAGE}"
                exit 1
            fi
            
            # Rest of your deployment script...
            sudo apt-get update -y
            sudo apt-get install -y unzip curl
            
            if ! command -v aws &> /dev/null; then
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip -q awscliv2.zip
                sudo ./aws/install
                rm -rf awscliv2.zip aws/
            fi
            
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            export AWS_REGION="${{ secrets.AWS_REGION }}"
            
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
            
            docker stop mltest 2>/dev/null || echo "No container to stop"
            docker rm mltest 2>/dev/null || echo "No container to remove"
            docker image prune -f
            
            echo "Pulling image: ${FULL_IMAGE}"
            docker pull ${FULL_IMAGE}
            
            echo "Starting container with image: ${FULL_IMAGE}"
            docker run -d \
              -p 8080:8080 \
              --name mltest \
              --memory=512m \
              --cpus=1.0 \
              --restart=unless-stopped \
              -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
              -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              -e AWS_REGION="${{ secrets.AWS_REGION }}" \
              ${FULL_IMAGE}
            
            sleep 15
            docker ps --filter "name=mltest"
            docker logs mltest --tail 20
            
            echo "=== Deployment Completed Successfully! ==="