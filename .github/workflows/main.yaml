name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  continuous-deployment:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Test SSH Connection
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 30s
          script: |
            echo "SSH connection successful!"
            whoami
            pwd

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu  # Make sure this matches your EC2_USER secret
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 600s
          command_timeout: 15m
          script: |
            set -e
            
            echo "=== Starting Deployment ==="
            
            # Install dependencies first
            echo "Installing required packages..."
            sudo apt-get update -y
            sudo apt-get install -y unzip curl
            
            # Check if AWS CLI is installed
            if ! command -v aws &> /dev/null; then
                echo "Installing AWS CLI..."
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip -q awscliv2.zip
                sudo ./aws/install
                rm -rf awscliv2.zip aws/
            fi
            
            # Check if Docker is installed
            if ! command -v docker &> /dev/null; then
                echo "Installing Docker..."
                sudo apt-get install -y docker.io
                sudo systemctl start docker
                sudo systemctl enable docker
                sudo usermod -aG docker ubuntu
                # Re-login to apply group changes
                newgrp docker
            fi
            
            # Set AWS credentials for ECR access
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_REGION=${{ secrets.AWS_REGION }}
            
            # Login to ECR
            echo "Logging into ECR..."
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_LOGIN_URI }}
            
            # Stop and remove existing container
            echo "Stopping existing container..."
            if docker ps -q --filter "name=mltest" | grep -q .; then
                docker stop mltest
                echo "Container stopped"
            else
                echo "No running container found"
            fi
            
            if docker ps -aq --filter "name=mltest" | grep -q .; then
                docker rm mltest
                echo "Container removed"
            else
                echo "No container to remove"
            fi
            
            # Clean up old images to free space
            echo "Cleaning up old images..."
            docker image prune -f
            
            # Pull latest image
            echo "Pulling latest image..."
            docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
            
            # Run new container with resource limits
            echo "Starting new container..."
            docker run -d \
              -p 8080:8080 \
              --name mltest \
              --memory=512m \
              --cpus=1.0 \
              --restart=unless-stopped \
              -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
              -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
              -e AWS_REGION=${{ secrets.AWS_REGION }} \
              ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
            
            # Wait for container to start
            echo "Waiting for container to start..."
            sleep 15
            
            # Check container status
            echo "=== Container Status ==="
            docker ps --filter "name=mltest" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            # Verify container is healthy
            if docker ps --filter "name=mltest" --filter "status=running" | grep -q mltest; then
                echo "✅ Container is running successfully"
            else
                echo "❌ Container failed to start"
                echo "=== Container Logs ==="
                docker logs mltest --tail 50
                exit 1
            fi
            
            echo "=== Recent Container Logs ==="
            docker logs mltest --tail 20
            
            # Final cleanup
            echo "=== Final Cleanup ==="
            docker system prune -f
            
            echo "=== Deployment Completed Successfully! ==="